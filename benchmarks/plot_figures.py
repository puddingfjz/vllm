


import numpy as np

latencys = list()
dyna_load_iters = list()
fname = 'layerbylayer_llama13b_pipelineD20_0.5gpu_doublebuffer_tp2_B512_P512_sortedIn.log'
fname = 'layerbylayer_llama13b_pipelineD20_0.5gpu_doublebuffer_tp2_B512_P512_nodynamic_sortedIn5.log'
fname = 'layerbylayer_llama13b_pipelineD10_0.5373gpu_doublebuffer_tp2_B512_P512_nodynamic_sortedIn5.log'

with open(fname, 'r') as f:
    lines = f.readlines()
    for line in lines:
        if 'In pre_increase_oncard_layers' in line:
            dyna_load_iters.append(len(latencys))
        if 'iter latency:' not in line:
            continue
        # [2m[36m(RayWorkerVllm pid=667331)[0m iter latency: 0.3168200356885791s abs: 4434707.000948323s
        pos1 = line.find('iter latency:') + len('iter latency:')
        pos2 = line.find('s abs:')
        latencys.append(float(line[pos1:pos2]))



latencys = latencys[1:]
dyna_load_iters = np.asarray(sorted(set(dyna_load_iters))) - 1
# print(latencys)
sum(latencys)

latencys_ours = latencys
dyna_load_iters_ours = dyna_load_iters


sum_ours = np.cumsum(latencys)




import matplotlib.pyplot as plt

# Data for plotting
xs = np.arange(len(latencys))

fig, ax = plt.subplots()
ax.plot(xs, latencys)
ax.plot(xs, [0.04]*len(latencys), color='r')
for i in range(len(dyna_load_iters)):
    ax.plot([dyna_load_iters[i]]*2, [0, 0.2], color='purple')


ax.set(xlabel='iter i', ylabel='latency (s)',)
    #    title='About as simple as it gets, folks')
ax.grid()

fig.savefig("./figures/cost_per_iter.png")
plt.show()




# 算动态腾挪的时间

import numpy as np

latencys = list()
dyna_load_iters = list()
fname = 'layerbylayer_llama13b_pipelineD20_0.5gpu_doublebuffer_tp2_B512_P512_sortedIn5.log'
fname = 'layerbylayer_llama13b_pipelineD10_0.5373gpu_doublebuffer_tp2_B512_P512_sortedIn5.log'
fname = 'layerbylayer_llama13b_pipelineD10_0.5373gpu_doublebuffer_tp2_B512_P512_sortedIn5-2.log'

with open(fname, 'r') as f:
    lines = f.readlines()
    for line in lines:
        if 'In pre_increase_oncard_layers' in line:
            dyna_load_iters.append(len(latencys))
        if 'iter latency:' not in line:
            continue
        # [2m[36m(RayWorkerVllm pid=667331)[0m iter latency: 0.3168200356885791s abs: 4434707.000948323s
        pos1 = line.find('iter latency:') + len('iter latency:')
        pos2 = line.find('s abs:')
        latencys.append(float(line[pos1:pos2]))



latencys = latencys[1:]
dyna_load_iters = np.asarray(sorted(set(dyna_load_iters))) - 1
# print(latencys)
sum(latencys)

latencys_dyna = latencys
dyna_load_iters_dyna = dyna_load_iters


sum_dyna = np.cumsum(latencys)





# 算一下vllm的时间
import numpy as np

latencys = list()
dyna_load_iters = list()
fname = 'vllm_llama13b_0.5gpu_tp2_B512_P512_sortedIn.log'
fname = 'vllm_llama13b_0.5688gpu_tp2_B512_P512_sortedIn.log'
fname = 'vllm_llama13b_0.5689gpu_tp2_B512_P512_sortedIn.log'
fname = 'vllm_llama13b_0.5689gpu_tp2_B512_P512_sortedIn5.log'
with open(fname, 'r', errors='ignore') as f:
    lines = f.readlines()
    for line in lines:
        if 'In pre_increase_oncard_layers' in line:
            dyna_load_iters.append(len(latencys))
        if 'iter latency:' not in line:
            continue
        # [2m[36m(RayWorkerVllm pid=667331)[0m iter latency: 0.3168200356885791s abs: 4434707.000948323s
        pos1 = line.find('iter latency:') + len('iter latency:')
        pos2 = line.find('s abs:')
        latencys.append(float(line[pos1:pos2]))



latencys = latencys[1:]
sum(latencys)

latencys_vllm = latencys

sum_vllm = np.cumsum(latencys)

import matplotlib.pyplot as plt

# Data for plotting
xs = np.arange(len(latencys))

fig, ax = plt.subplots()
ax.plot(xs, latencys)
ax.plot(xs, [0.04]*len(latencys), color='r')
for i in range(len(dyna_load_iters)):
    ax.plot([dyna_load_iters[i]]*2, [0, 0.2], color='purple')


ax.set(xlabel='iter i', ylabel='latency (s)',)
    #    title='About as simple as it gets, folks')
ax.grid()

fig.savefig("./figures/cost_per_iter_vllm3.png")
plt.show()






# 画累积latency的图
import matplotlib.pyplot as plt

# Data for plotting

fig, ax = plt.subplots()
ax.plot(np.arange(len(sum_ours)), sum_ours, label='ours')
ax.plot(np.arange(len(sum_dyna)), sum_dyna, label='dyna')
ax.plot(np.arange(len(sum_vllm)), sum_vllm, label='vllm')
for i in range(len(dyna_load_iters_dyna)):
    ax.plot([dyna_load_iters_dyna[i]]*2, [0, sum_ours[-1]], label=f'{i}')


ax.set(xlabel='iter i', ylabel='cum latency (s)',)
    #    title='About as simple as it gets, folks')
ax.grid()
ax.legend()

fig.savefig("./figures/cum_cost_per_iter_PD10-2.png")
plt.show()






# 画per iter latency的对比图
import matplotlib.pyplot as plt

# Data for plotting

fig, ax = plt.subplots()
# ax.plot(np.arange(len(latencys_ours)), latencys_ours, label='ours')
ax.plot(np.arange(len(latencys_dyna)), latencys_dyna, label='dyna')
ax.plot(np.arange(len(latencys_vllm)), latencys_vllm, label='vllm')
for i in range(len(dyna_load_iters_dyna)):
    ax.plot([dyna_load_iters_dyna[i]]*2, [0, latencys_ours[0]], label=f'{i}')


ax.set(xlabel='iter i', ylabel='latency (s)',)
    #    title='About as simple as it gets, folks')
ax.grid()
ax.legend()

fig.savefig("./figures/comp_cost_per_iter_PD10-2.png")
plt.show()







# 对比我们的latencys和vllm的latencys==================================
latencys_ours = np.asarray(latencys_ours)
latencys_vllm = np.asarray(latencys_vllm)

bad_iters = np.nonzero(latencys_ours[:dyna_load_iters_ours[0]] > latencys_vllm[:dyna_load_iters_ours[0]])
bad_iters = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 358, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 593, 594, 595, 597, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 802, 805, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 913, 914, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1039, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1086, 1087, 1088, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1108, 1110, 1111, 1113, 1114, 1116, 1117, 1118, 1120, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254]


tmp_iters = np.nonzero(latencys_ours[:dyna_load_iters_ours[0]] < 0.055)[0]
bad_iters = set(tmp_iters).intersection(list(bad_iters[0]))
bad_iters = [23, 24, 26, 28, 30, 32, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 52, 54, 56, 60, 62, 63, 64, 65, 66, 68, 69, 71, 73, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 95, 96, 98, 100, 102, 106, 108, 110, 112, 113, 115, 123, 124, 128, 131, 133, 137, 138, 139, 143, 145, 147, 149, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 167, 168, 170, 172, 173, 175, 176, 179, 183, 184, 185, 188, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 206, 207, 208, 209, 212, 214, 217, 219, 223, 225, 226, 227, 229, 237, 239, 241, 244, 247, 250, 252, 254, 260, 262, 263, 267, 268, 270, 278, 281, 284, 285, 286, 289, 291, 295, 297, 299, 302, 307, 324, 326, 327, 329, 342, 344, 346, 349, 356, 363, 367, 378, 380, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 408, 409, 412, 413, 414, 415, 417, 418, 419, 421, 433, 434, 435, 437, 440, 442, 443, 444, 445, 447, 451, 460, 469, 473, 474, 478, 479, 480, 484, 485, 494, 497, 500, 513, 514, 515, 518, 520, 521, 523, 528, 537, 538, 542, 544, 545, 546, 558, 562, 564, 572, 575, 577, 579, 581, 586, 594, 601, 602, 609, 612, 613, 615, 617, 619, 622, 624, 628, 633, 634, 643, 646, 657, 660, 662, 666, 671, 679, 682, 684, 694, 705, 711, 717, 718, 723, 725, 726, 729, 735, 736, 737, 738, 739, 740, 744, 748, 751, 754, 758, 763, 764, 774, 775, 778, 784, 786, 788, 798, 810, 811, 812, 819, 822, 829, 833, 844, 858, 867, 887, 916, 920, 923, 928, 936, 950, 959, 963, 966, 971, 974, 980, 982, 984, 986, 993, 1009, 1014, 1019, 1021, 1039, 1042, 1044, 1054, 1056, 1058, 1060, 1072, 1077, 1078, 1080, 1088, 1094, 1096, 1098, 1104, 1106, 1108, 1122, 1131, 1133, 1149, 1157, 1165, 1167, 1216]


bad_diff = (latencys_ours[:dyna_load_iters_ours[0]] - latencys_vllm[:dyna_load_iters_ours[0]])[bad_iters]

print([f'{_:.3f}' for _ in latencys_ours[:dyna_load_iters_ours[0]][bad_iters]])
['0.048', '0.055', '0.050', '0.050', '0.048', '0.049', '0.054', '0.051', '0.046', '0.047', '0.050', '0.053', '0.052', '0.051', '0.049', '0.055', '0.047', '0.050', '0.049', '0.048', '0.048', '0.050', '0.050', '0.050', '0.050', '0.048', '0.051', '0.048', '0.048', '0.049', '0.054', '0.052', '0.051', '0.055', '0.051', '0.049', '0.051', '0.053', '0.051', '0.047', '0.053', '0.048', '0.053', '0.052', '0.053', '0.052', '0.053', '0.052', '0.050', '0.051', '0.055', '0.050', '0.042', '0.039', '0.053', '0.052', '0.052', '0.040', '0.054', '0.051', '0.052', '0.052', '0.053', '0.052', '0.037', '0.051', '0.053', '0.053', '0.049', '0.053', '0.036', '0.051', '0.054', '0.043', '0.054', '0.050', '0.052', '0.051', '0.039', '0.050', '0.046', '0.041', '0.053', '0.051', '0.043', '0.043', '0.049', '0.053', '0.036', '0.051', '0.040', '0.050', '0.052', '0.041', '0.049', '0.052', '0.052', '0.042', '0.055', '0.041', '0.051', '0.051', '0.041', '0.053', '0.055', '0.045', '0.040', '0.050', '0.039', '0.047', '0.036', '0.052', '0.051', '0.035', '0.037', '0.052', '0.041', '0.037', '0.036', '0.043', '0.054', '0.042', '0.054', '0.052', '0.054', '0.037', '0.054', '0.053', '0.036', '0.045', '0.053', '0.038', '0.040', '0.036', '0.037', '0.036', '0.051', '0.043', '0.054', '0.041', '0.041', '0.037', '0.042', '0.052', '0.053', '0.051', '0.052', '0.052', '0.043', '0.053', '0.038', '0.054', '0.051', '0.054', '0.050', '0.050', '0.050', '0.050', '0.053', '0.052', '0.050', '0.054', '0.050', '0.050', '0.053', '0.037', '0.055', '0.054', '0.046', '0.051', '0.054', '0.052', '0.052', '0.051', '0.051', '0.055', '0.052', '0.050', '0.053', '0.044', '0.051', '0.037', '0.052', '0.047', '0.038', '0.055', '0.053', '0.055', '0.039', '0.054', '0.051', '0.055', '0.051', '0.053', '0.041', '0.050', '0.055', '0.045', '0.039', '0.043', '0.054', '0.038', '0.049', '0.054', '0.037', '0.055', '0.038', '0.055', '0.054', '0.052', '0.041', '0.038', '0.037', '0.040', '0.053', '0.045', '0.040', '0.053', '0.051', '0.054', '0.053', '0.050', '0.052', '0.041', '0.040', '0.041', '0.036', '0.051', '0.055', '0.050', '0.037', '0.052', '0.043', '0.052', '0.037', '0.054', '0.055', '0.053', '0.051', '0.054', '0.055', '0.042', '0.050', '0.051', '0.042', '0.036', '0.052', '0.055', '0.050', '0.053', '0.052', '0.055', '0.052', '0.051', '0.041', '0.040', '0.041', '0.039', '0.053', '0.040', '0.053', '0.041', '0.052', '0.040', '0.044', '0.036', '0.037', '0.045', '0.055', '0.054', '0.053', '0.053', '0.050', '0.044', '0.042', '0.043', '0.037', '0.037', '0.049', '0.046', '0.041', '0.040', '0.044', '0.055', '0.037', '0.055', '0.044', '0.042', '0.036', '0.045', '0.054', '0.055', '0.041', '0.041', '0.036', '0.040', '0.036', '0.037', '0.038', '0.053', '0.053', '0.055', '0.036', '0.042', '0.039', '0.037', '0.041', '0.055', '0.047', '0.037', '0.053', '0.036', '0.042', '0.039', '0.036', '0.042', '0.036', '0.053', '0.039', '0.042', '0.037', '0.038', '0.043', '0.037', '0.052']


print([f'{_:.3f}' for _ in latencys_vllm[:dyna_load_iters_ours[0]][bad_iters]])
['0.039', '0.044', '0.041', '0.039', '0.037', '0.038', '0.052', '0.041', '0.038', '0.045', '0.039', '0.047', '0.041', '0.041', '0.039', '0.049', '0.044', '0.040', '0.041', '0.040', '0.040', '0.048', '0.040', '0.048', '0.039', '0.047', '0.046', '0.038', '0.040', '0.038', '0.041', '0.044', '0.043', '0.047', '0.040', '0.039', '0.041', '0.042', '0.041', '0.041', '0.044', '0.043', '0.041', '0.044', '0.041', '0.042', '0.040', '0.045', '0.045', '0.042', '0.051', '0.048', '0.034', '0.034', '0.044', '0.045', '0.049', '0.035', '0.042', '0.043', '0.048', '0.044', '0.041', '0.043', '0.033', '0.043', '0.051', '0.044', '0.044', '0.048', '0.032', '0.044', '0.040', '0.033', '0.044', '0.047', '0.046', '0.048', '0.032', '0.044', '0.043', '0.031', '0.045', '0.047', '0.041', '0.026', '0.044', '0.046', '0.028', '0.041', '0.025', '0.045', '0.044', '0.040', '0.043', '0.048', '0.051', '0.040', '0.049', '0.024', '0.048', '0.048', '0.024', '0.045', '0.045', '0.043', '0.027', '0.050', '0.023', '0.044', '0.023', '0.049', '0.048', '0.021', '0.032', '0.049', '0.022', '0.026', '0.026', '0.021', '0.046', '0.026', '0.049', '0.049', '0.047', '0.034', '0.047', '0.043', '0.030', '0.044', '0.044', '0.026', '0.023', '0.027', '0.022', '0.022', '0.049', '0.032', '0.046', '0.039', '0.030', '0.025', '0.022', '0.048', '0.050', '0.049', '0.051', '0.051', '0.036', '0.046', '0.033', '0.048', '0.049', '0.052', '0.041', '0.043', '0.046', '0.042', '0.045', '0.044', '0.046', '0.046', '0.041', '0.049', '0.049', '0.034', '0.052', '0.052', '0.045', '0.047', '0.050', '0.051', '0.047', '0.043', '0.047', '0.043', '0.050', '0.044', '0.042', '0.023', '0.051', '0.034', '0.051', '0.027', '0.025', '0.053', '0.050', '0.053', '0.023', '0.052', '0.043', '0.050', '0.048', '0.052', '0.023', '0.049', '0.044', '0.043', '0.033', '0.041', '0.049', '0.023', '0.049', '0.051', '0.025', '0.052', '0.037', '0.050', '0.048', '0.045', '0.041', '0.026', '0.034', '0.025', '0.051', '0.039', '0.021', '0.050', '0.046', '0.054', '0.045', '0.050', '0.048', '0.040', '0.025', '0.039', '0.028', '0.046', '0.048', '0.048', '0.033', '0.051', '0.022', '0.051', '0.033', '0.044', '0.050', '0.052', '0.048', '0.048', '0.048', '0.040', '0.048', '0.049', '0.034', '0.024', '0.048', '0.049', '0.041', '0.041', '0.049', '0.049', '0.046', '0.047', '0.033', '0.025', '0.024', '0.026', '0.050', '0.025', '0.052', '0.025', '0.049', '0.032', '0.035', '0.022', '0.036', '0.037', '0.046', '0.046', '0.049', '0.051', '0.049', '0.042', '0.033', '0.034', '0.021', '0.033', '0.043', '0.042', '0.025', '0.024', '0.021', '0.052', '0.032', '0.050', '0.040', '0.040', '0.024', '0.042', '0.050', '0.048', '0.040', '0.026', '0.021', '0.026', '0.022', '0.032', '0.027', '0.046', '0.050', '0.050', '0.034', '0.024', '0.023', '0.037', '0.026', '0.051', '0.023', '0.023', '0.053', '0.024', '0.029', '0.034', '0.028', '0.023', '0.033', '0.051', '0.020', '0.021', '0.022', '0.024', '0.022', '0.033', '0.049']








# ========================================================================================
# ========================================================================================
# ========================================================================================
# ========================================================================================
# ========================================================================================
# ========================================================================================
# ========================================================================================
# 比较一下vllm和我们没有改data layout的版本是什么时候开始reshape KV 的slot产生不同的
with open("reshape_info_vllm.log", 'r') as f_vllm:
    with open("reshape_info.log", 'r') as f:
        lines_vllm = f_vllm.readlines()
        lines = f.readlines()
        for i in range(len(lines_vllm)):
            if lines_vllm[i] != lines[i]:
                print(i, len(lines_vllm[i]), len(lines[i]))
                break



with open("blk_table_info_vllm.log", 'r') as f_vllm:
    with open("blk_table_info.log", 'r') as f:
        lines_vllm = f_vllm.readlines()
        lines = f.readlines()
        for i in range(len(lines_vllm)):
            if lines_vllm[i] != lines[i]:
                print(i, len(lines_vllm[i]), len(lines[i]))
                break


import json
a = json.loads(lines_vllm[241])
b = json.loads(lines[241])
for i in range(len(a)):
    if a[i]!=b[i]:
        print(i)
        break



with open("blk_table_info_vllm2_model.log", 'r') as f_vllm:
    with open("blk_table_info_2_model.log", 'r') as f:
        lines_vllm = f_vllm.readlines()
        lines = f.readlines()
        for i in range(len(lines_vllm)):
            if lines_vllm[i] != lines[i]:
                print(i, len(lines_vllm[i]), len(lines[i]))
                break




import json
a = json.loads(lines_vllm[3])
b = json.loads(lines[3])
for i in range(len(a)):
    if a[i]!=b[i]:
        print(i)
        print(a[i])
        print(b[i])
        break




with open("blk_table_info_vllm2.log", 'r') as f_vllm:
    with open("blk_table_info_2.log", 'r') as f:
        lines_vllm = f_vllm.readlines()
        lines = f.readlines()
        for i in range(len(lines_vllm)):
            if lines_vllm[i] != lines[i]:
                print(i, len(lines_vllm[i]), len(lines[i]))
                break


